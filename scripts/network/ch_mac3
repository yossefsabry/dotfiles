#!/bin/bash

# Usage: ./ch_mac -i <interface> [-m <new_mac_address>] [-f <valid_macs_file>]

VALID_MACS_FILE=""

ARGS=$(getopt -o i:m:f: -- "$@")
eval set -- "$ARGS"

while true; do
    case "$1" in
        -i) interface="$2"; shift 2 ;;
        -m) mac="$2"; shift 2 ;;
        -f) VALID_MACS_FILE="$2"; shift 2 ;;
        --) shift; break ;;
        *) echo "Usage: $0 -i <interface> [-m <new_mac_address>] [-f <valid_macs_file>]" && exit 1 ;;
    esac
done

if [[ -z "$interface" ]]; then
    echo "Error: Network interface is required."
    exit 1
fi

# If no MAC address is provided, select a random one from valid_macs.txt
if [[ -z "$mac" ]]; then
    if [[ -z "$VALID_MACS_FILE" ]]; then
        echo "Error: Path to valid MACs file is required if no MAC address is provided."
        exit 1
    fi

    if [[ ! -f "$VALID_MACS_FILE" ]]; then
        echo "Error: File $VALID_MACS_FILE not found!"
        exit 1
    fi

    mac=$(shuf -n 1 "$VALID_MACS_FILE")  # Pick a random MAC
    echo "Random MAC selected: $mac"
fi

echo "Current MAC address: $(ip link show "$interface" | grep -i "link/ether" | awk '{print $2}')"

echo "Bringing down the interface..."
sudo ip link set "$interface" down

echo "Changing MAC address to $mac..."
sudo ip link set dev "$interface" address "$mac"

echo "Bringing up the interface..."
sudo ip link set "$interface" up

# Verify the change
current_mac=$(ip link show "$interface" | grep -i "link/ether" | awk '{print $2}')

if [[ "${current_mac,,}" == "${mac,,}" ]]; then
    echo "MAC address successfully changed to $current_mac."
else
    echo "Failed to change the MAC address. Current MAC: $current_mac"
    exit 1
fi

